version: "3"
services:
  frontend:
    container_name: frontend
    restart: unless-stopped
    build:
      context: ./frontend
      dockerfile: dockerfile.prod
      args:
        API_URL: "*"
    ports:
      - 3000:3000
    volumes:
      - build_frontend:/frontend/dist
      - ./frontend/:/frontend
      - ./frontend/node_modules:/frontend/node_modules
    environment:
      - CI=true
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_BACKEND_URL=http://www.aiary.net
    stdin_open: true
    tty: true
    networks:
      - aiary

  backend:
    container_name: backend
    build:
      context: backend-spring
    restart: always
    environment:
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    networks:
      - aiary

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - 6379:6379
    volumes:
      - ./redis/data:/data
    labels:
      - "name=redis"
      - "mode=standalone"
    restart: always
    command: redis-server
    networks:
      - aiary

  elasticsearch:
    container_name: elasticsearch
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.1
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - ES_JAVA_OPTS=-Xms2048m -Xmx2048m
      - discovery.type=single-node
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./backend-spring/elk/elasticsearch/data:/usr/share/elasticsearch/data
    networks:
      - aiary

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:8.8.1  
    build:
      context: ./backend-spring/elk  
    volumes:         
      - ./backend-spring/elk/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    environment:
      - "xpack.monitoring.enabled=false"
    depends_on:
      - elasticsearch
    networks:
      - aiary

  ai_backend:
    container_name: ai_backend
    build:
      context: ./Ai-flask
      dockerfile: Dockerfile
    environment:
      FLASK_ENV: development
      FLASK_DEBUG: 1
    command: gunicorn -w 5 -b 0:8000 wsgi:app
    restart: unless-stopped
    networks:
      - aiary

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - build_frontend:/var/www/frontend
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/log:/var/log/nginx
    # expose:
    #   - "80"
    #   - "443"
    depends_on:
      - ai_backend
      - backend
      - frontend
    networks:
      - aiary
    restart: on-failure

  ai_rabbitmq:
    hostname: rabbit
    container_name: ai_rabbitmq
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    depends_on:
      - ai_backend
    networks:
      - aiary
    expose:
      - "15672"

  ai_celery:
    container_name: ai_celery
    build:
      context: ./Ai-flask
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - ai_backend
      - ai_rabbitmq
    networks:
      - aiary
    command:
      [
        "celery",
        "-A",
        "tasks",
        "worker",
        "--loglevel=info",
        "--pool",
        "threads",
      ]

  ai_redis:
    container_name: ai_redis
    image: redis:alpine
    command: redis-server --port 6000
    ports:
      - "6000:6000"
    networks:
      - aiary

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    ports:
      - 9090:9090
    networks:
      - aiary

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./backend-spring/data/grafana:/var/lib/grafana
      - ./prometheus/grafana.ini:/etc/grafana/grafana.ini
    restart: unless-stopped
    ports:
      - 3030:3030
    depends_on:
      - prometheus
    env_file:
      - ./prometheus/grafana.env
    networks:
      - aiary

networks:
  aiary:
    driver: bridge

volumes:
  build_frontend: null