version: "3"
services:
  frontend:
    container_name: frontend
    restart: unless-stopped
    build:
      context: ./frontend
      dockerfile: dockerfile.prod
      args:
        API_URL: "*"
    ports:
      - "3000:3000"
    volumes:
      - build_frontend:/frontend/dist
      - ./frontend/:/frontend
      - ./frontend/node_modules:/frontend/node_modules
    environment:
      - CI=true
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_BACKEND_URL=http://www.aiary.net
    stdin_open: true
    tty: true
    networks:
      - aiary

  backend:
    container_name: backend
    build:
      context: ./backend-spring
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "7001:7001"
      - "7002:7002"
      - "7003:7003"
      - "7004:7004"
      - "7005:7005"
      - "7006:7006"
    restart: always
    networks:
      - aiary

  node1:
    network_mode: "service:backend"
    container_name: node1
    image: redis
    volumes:
      - ./redis/redis1.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  node2:
    network_mode: "service:backend"
    container_name: node2
    image: redis
    volumes:
      - ./redis/redis2.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  node3:
    network_mode: "service:backend"
    container_name: node3
    image: redis
    volumes:
      - ./redis/redis3.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  node4:
    network_mode: "service:backend"
    container_name: node4
    image: redis
    volumes:
      - ./redis/redis4.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  node5:
    network_mode: "service:backend"
    container_name: node5
    image: redis
    volumes:
      - ./redis/redis5.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  node6:
    network_mode: "service:backend"
    container_name: node6
    image: redis
    volumes:
      - ./redis/redis6.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-cluster-entry:
    network_mode: "service:backend"
    image: redis
    container_name: redis-cluster
    command: redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1 --cluster-yes
    depends_on:
      - node1
      - node2
      - node3
      - node4
      - node5
      - node6

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - aiary

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./backend-spring/data/grafana:/var/lib/grafana
      - ./prometheus/grafana.ini:/etc/grafana/grafana.ini
    restart: unless-stopped
    ports:
      - "3030:3030"
    depends_on:
      - prometheus
    env_file:
      - ./prometheus/grafana.env
    networks:
      - aiary


  ai_backend:
    container_name: ai_backend
    build:
      context: ./Ai-flask
      dockerfile: Dockerfile
    environment:
      FLASK_ENV: development
      FLASK_DEBUG: 1
    command: gunicorn -w 5 -b 0:8000 wsgi:app
    restart: unless-stopped
    networks:
      - aiary

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - build_frontend:/var/www/frontend
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/log:/var/log/nginx
    depends_on:
      - ai_backend
      - backend
      - frontend
    networks:
      - aiary
    restart: on-failure

  ai_rabbitmq:
    hostname: rabbit
    container_name: ai_rabbitmq
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    depends_on:
      - ai_backend
    networks:
      - aiary
    expose:
      - "15672"

  ai_celery:
    container_name: ai_celery
    build:
      context: ./Ai-flask
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - ai_backend
      - ai_rabbitmq
    networks:
      - aiary
    command:
      [
        "celery",
        "-A",
        "tasks",
        "worker",
        "--loglevel=info",
        "--pool",
        "threads",
      ]

  ai_redis:
    container_name: ai_redis
    image: redis:alpine
    command: redis-server --port 6000
    ports:
      - "6000:6000"
    networks:
      - aiary


networks:
  aiary:
    driver: bridge

volumes:
  build_frontend: null